// Code generated by go-swagger; DO NOT EDIT.

package email

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new email API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for email API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddEmailAccount(params *AddEmailAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddEmailAccountOK, error)

	AddEmailAlias(params *AddEmailAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddEmailAliasOK, error)

	DeleteEmailAccount(params *DeleteEmailAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEmailAccountOK, error)

	DeleteEmailAlias(params *DeleteEmailAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEmailAliasOK, error)

	ListEmailAccounts(params *ListEmailAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEmailAccountsOK, error)

	UpdateEmailAddress(params *UpdateEmailAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEmailAddressOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddEmailAccount add email account API
*/
func (a *Client) AddEmailAccount(params *AddEmailAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddEmailAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEmailAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addEmailAccount",
		Method:             "POST",
		PathPattern:        "/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddEmailAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEmailAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addEmailAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddEmailAlias add email alias API
*/
func (a *Client) AddEmailAlias(params *AddEmailAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddEmailAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEmailAliasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addEmailAlias",
		Method:             "POST",
		PathPattern:        "/email/{emailAddress}/aliasses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddEmailAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEmailAliasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addEmailAlias: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEmailAccount delete email account API
*/
func (a *Client) DeleteEmailAccount(params *DeleteEmailAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEmailAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEmailAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEmailAccount",
		Method:             "DELETE",
		PathPattern:        "/email/{emailAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEmailAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEmailAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEmailAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEmailAlias delete email alias API
*/
func (a *Client) DeleteEmailAlias(params *DeleteEmailAliasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEmailAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEmailAliasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEmailAlias",
		Method:             "DELETE",
		PathPattern:        "/email/{emailAddress}/aliasses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEmailAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEmailAliasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEmailAlias: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEmailAccounts list email accounts API
*/
func (a *Client) ListEmailAccounts(params *ListEmailAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEmailAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEmailAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEmailAccounts",
		Method:             "GET",
		PathPattern:        "/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEmailAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEmailAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEmailAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEmailAddress update email address API
*/
func (a *Client) UpdateEmailAddress(params *UpdateEmailAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEmailAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEmailAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEmailAddress",
		Method:             "PUT",
		PathPattern:        "/email/{emailAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEmailAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEmailAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEmailAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
