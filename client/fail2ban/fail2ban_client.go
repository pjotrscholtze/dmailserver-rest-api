// Code generated by go-swagger; DO NOT EDIT.

package fail2ban

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new fail2ban API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fail2ban API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteFail2banIP(params *DeleteFail2banIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFail2banIPOK, error)

	GetFail2banIps(params *GetFail2banIpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFail2banIpsOK, error)

	PostFail2banIP(params *PostFail2banIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFail2banIPOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteFail2banIP delete fail2ban Ip API
*/
func (a *Client) DeleteFail2banIP(params *DeleteFail2banIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFail2banIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFail2banIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFail2banIp",
		Method:             "DELETE",
		PathPattern:        "/fail2ban/{ip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFail2banIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFail2banIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFail2banIp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFail2banIps get fail2ban ips API
*/
func (a *Client) GetFail2banIps(params *GetFail2banIpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFail2banIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFail2banIpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFail2banIps",
		Method:             "GET",
		PathPattern:        "/fail2ban",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFail2banIpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFail2banIpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFail2banIps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostFail2banIP post fail2ban Ip API
*/
func (a *Client) PostFail2banIP(params *PostFail2banIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFail2banIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFail2banIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postFail2banIp",
		Method:             "POST",
		PathPattern:        "/fail2ban",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostFail2banIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFail2banIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postFail2banIp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
